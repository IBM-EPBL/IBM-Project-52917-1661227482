# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knM19B2aeqfAQP12jLF7T02TgIMFYo78
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings 
warnings.filterwarnings('ignore')

d = pd.read_csv(r'abalone.csv')

d.head()

sns.boxplot(d['Diameter'])

plt.hist(d['Diameter'])

plt.plot(d['Diameter'].head(10))

plt.pie(d['Diameter'].head(),autopct='%.2f')

sns.distplot(d['Diameter'].head(200))

plt.scatter(d['Diameter'].head(500),d['Length'].head(500))

plt.bar(d['Sex'].head(10),d['Rings'].head(10))

#labelling of x,y and result

plt.title('Bar plot')
plt.xlabel('Diameter')
plt.ylabel('Rings')

sns.barplot(d['Sex'], d['Rings'])

sns.barplot(d['Diameter'].head(50),d['Rings'].head(50))

sns.jointplot('Diameter','Rings',hue='Sex',data=d.head())

sns.lineplot(d['Diameter'].head(),d['Rings'].head())

sns.boxplot(d['Sex'].head(10),d['Diameter'].head(10),d['Rings'].head(10))

fig=plt.figure(figsize=(8,5))
sns.heatmap(d.head().corr(),annot=True)

sns.pairplot(d.head(),hue='Rings')

sns.pairplot(d.head())

d.head()

d.tail()

d.info()

d.describe()

d.mode().T

d.shape

d.kurt()

d.skew()

d.var()

d.nunique()

d.isna()

d.isna().any()

d.isna().sum()

d.isna().any().sum()
#no missing values

#finding outliers

sns.boxplot(d['Diameter'])

#handling outliers

qnt=d.quantile(q=[0.25,0.75])
qnt

iqr=qnt.loc[0.75]-qnt.loc[0.25]

iqr

lower=qnt.loc[0.25]-(1.5*iqr)
lower

upper=qnt.loc[0.75]+(1.5*iqr)
upper

# replacing outliers

##Diameter
d['Diameter']=np.where(d['Diameter']<0.155,0.4078,d['Diameter'])
sns.boxplot(d['Diameter'])

## Length

sns.boxplot(d['Length'])

d['Length']=np.where(d['Length']<0.23,0.52, d['Length'])

sns.boxplot(d['Length'])

sns.boxplot(d['Height'])

d['Height']=np.where(d['Height']<0.04,0.139, d['Height'])
d['Height']=np.where(d['Height']>0.23,0.139, d['Height'])

sns.boxplot(d['Height'])

## Whole weight

sns.boxplot(d['Whole weight'])

d['Whole weight']=np.where(d['Whole weight']>0.9,0.82, d['Whole weight'])

sns.boxplot(d['Whole weight'])

## Shucked weight

sns.boxplot(d['Shucked weight'])

d['Shucked weight']=np.where(d['Shucked weight']>0.93,0.35, d['Shucked weight'])

sns.boxplot(d['Shucked weight'])

sns.boxplot(d['Viscera weight'])

d['Viscera weight']=np.where(d['Viscera weight']>0.46,0.18, d['Viscera weight'])

sns.boxplot(d['Viscera weight'])

## Shell weight

sns.boxplot(d['Shell weight'])

d['Shell weight']=np.where(d['Shell weight']>0.61,0.2388, d['Shell weight'])

sns.boxplot(d['Shell weight'])

#one hot encoding

d['Sex'].replace({'M':1,'F':0,'I':2},inplace=True)
d

x=d.drop(columns= ['Rings'])
y=d['Rings']
x

y

from sklearn.preprocessing import scale  #StandardScaler

#Scaling the independent variables

x = scale(x)
x

from sklearn.model_selection import train_test_split

#spliting data to train and test

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2)
print(x_train.shape, x_test.shape)

#Multiple Regression 

from sklearn.linear_model import LinearRegression

MLR=LinearRegression()

MLR.fit(x_train,y_train)